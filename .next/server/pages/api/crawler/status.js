"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/crawler/status";
exports.ids = ["pages/api/crawler/status"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcrawler%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcrawler%2Fstatus.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcrawler%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcrawler%2Fstatus.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/crawler/status.ts */ \"(api-node)/./pages/api/crawler/status.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/crawler/status\",\n        pathname: \"/api/crawler/status\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_crawler_status_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGY3Jhd2xlciUyRnN0YXR1cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGY3Jhd2xlciUyRnN0YXR1cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUMwRDtBQUMxRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMseURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHlEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2NyYXdsZXIvc3RhdHVzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jcmF3bGVyL3N0YXR1c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NyYXdsZXIvc3RhdHVzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcrawler%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcrawler%2Fstatus.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/crawler/status.ts":
/*!*************************************!*\
  !*** ./pages/api/crawler/status.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _utils_crawler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/crawler */ \"(api-node)/./utils/crawler.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_crawler__WEBPACK_IMPORTED_MODULE_0__]);\n_utils_crawler__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            isRunning: false,\n            progress: 0,\n            totalUrls: 0,\n            processedUrls: 0,\n            errors: [\n                'Method not allowed'\n            ]\n        });\n    }\n    try {\n        const status = (0,_utils_crawler__WEBPACK_IMPORTED_MODULE_0__.getCrawlerStatus)();\n        return res.status(200).json(status);\n    } catch (error) {\n        console.error('Error getting crawler status:', error);\n        return res.status(500).json({\n            isRunning: false,\n            progress: 0,\n            totalUrls: 0,\n            processedUrls: 0,\n            errors: [\n                `Failed to get crawler status: ${error.message}`\n            ]\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9jcmF3bGVyL3N0YXR1cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUMwRDtBQUczQyxlQUFlQyxRQUM1QkMsR0FBbUIsRUFDbkJDLEdBQW1DO0lBRW5DLElBQUlELElBQUlFLE1BQU0sS0FBSyxPQUFPO1FBQ3hCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJDLFdBQVc7WUFDWEMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLGVBQWU7WUFDZkMsUUFBUTtnQkFBQzthQUFxQjtRQUNoQztJQUNGO0lBRUEsSUFBSTtRQUNGLE1BQU1OLFNBQVNMLGdFQUFnQkE7UUFDL0IsT0FBT0csSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ0Q7SUFDOUIsRUFBRSxPQUFPTyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU9ULElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDMUJDLFdBQVc7WUFDWEMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hDLGVBQWU7WUFDZkMsUUFBUTtnQkFBQyxDQUFDLDhCQUE4QixFQUFFQyxNQUFNRSxPQUFPLEVBQUU7YUFBQztRQUM1RDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvcGFnZXMvYXBpL2NyYXdsZXIvc3RhdHVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgZ2V0Q3Jhd2xlclN0YXR1cyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NyYXdsZXInO1xuaW1wb3J0IHsgQ3Jhd2xlclN0YXR1cyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL2NyYXdsZXInO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxuICByZXE6IE5leHRBcGlSZXF1ZXN0LFxuICByZXM6IE5leHRBcGlSZXNwb25zZTxDcmF3bGVyU3RhdHVzPlxuKSB7XG4gIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7XG4gICAgICBpc1J1bm5pbmc6IGZhbHNlLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB0b3RhbFVybHM6IDAsXG4gICAgICBwcm9jZXNzZWRVcmxzOiAwLFxuICAgICAgZXJyb3JzOiBbJ01ldGhvZCBub3QgYWxsb3dlZCddXG4gICAgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHN0YXR1cyA9IGdldENyYXdsZXJTdGF0dXMoKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oc3RhdHVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGNyYXdsZXIgc3RhdHVzOicsIGVycm9yKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgaXNSdW5uaW5nOiBmYWxzZSxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdG90YWxVcmxzOiAwLFxuICAgICAgcHJvY2Vzc2VkVXJsczogMCxcbiAgICAgIGVycm9yczogW2BGYWlsZWQgdG8gZ2V0IGNyYXdsZXIgc3RhdHVzOiAke2Vycm9yLm1lc3NhZ2V9YF1cbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImdldENyYXdsZXJTdGF0dXMiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsImlzUnVubmluZyIsInByb2dyZXNzIiwidG90YWxVcmxzIiwicHJvY2Vzc2VkVXJscyIsImVycm9ycyIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/crawler/status.ts\n");

/***/ }),

/***/ "(api-node)/./utils/crawler.ts":
/*!**************************!*\
  !*** ./utils/crawler.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crawlSingleUrl: () => (/* binding */ crawlSingleUrl),\n/* harmony export */   extractInviteLink: () => (/* binding */ extractInviteLink),\n/* harmony export */   getCrawlerStatus: () => (/* binding */ getCrawlerStatus),\n/* harmony export */   isRunning: () => (/* binding */ isRunning),\n/* harmony export */   startCrawler: () => (/* binding */ startCrawler),\n/* harmony export */   stopCrawler: () => (/* binding */ stopCrawler)\n/* harmony export */ });\n/* harmony import */ var crawlee__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crawlee */ \"crawlee\");\n/* harmony import */ var _fileSystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fileSystem */ \"(api-node)/./utils/fileSystem.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([crawlee__WEBPACK_IMPORTED_MODULE_0__]);\ncrawlee__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Regular expression to find WhatsApp invite links\nconst whatsappLinkRegex = /https:\\/\\/chat\\.whatsapp\\.com(?:\\/invite)?\\/([A-Za-z0-9]{22})/gm;\n// Global variables to track crawler state\nlet isCrawlerRunning = false;\nlet stopRequested = false;\nlet currentStatus = {\n    isRunning: false,\n    progress: 0,\n    totalUrls: 0,\n    processedUrls: 0,\n    errors: []\n};\nlet crawler = null;\nlet requestQueue = null;\nlet totalRequestsAdded = 0;\nlet processedRequests = 0;\n// Get crawler configuration\nconst getCrawlerConfig = ()=>{\n    const dataDir = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), 'data');\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n    const configPath = path__WEBPACK_IMPORTED_MODULE_3___default().join(dataDir, 'crawler-settings.json');\n    // Default configuration\n    const defaultConfig = {\n        maxConcurrency: 5,\n        maxRequestsPerCrawl: 100,\n        maxRequestRetries: 3,\n        requestHandlerTimeoutSecs: 60,\n        navigationTimeoutSecs: 30,\n        sameDomainDelaySecs: 1,\n        useHeadless: false\n    };\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(configPath)) {\n        return defaultConfig;\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(configPath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading crawler config:', error);\n        return defaultConfig;\n    }\n};\n// Extract domain from URL\nconst extractDomain = (url)=>{\n    try {\n        const urlObj = new URL(url);\n        return urlObj.hostname;\n    } catch (error) {\n        // If URL parsing fails, return a sanitized version of the URL\n        return url.replace(/^https?:\\/\\//, '').replace(/^www\\./, '').split('/')[0];\n    }\n};\n// Create a consistent filename for saving data from a URL\nconst createConsistentFilename = (url)=>{\n    const domain = extractDomain(url);\n    return domain.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();\n};\n// Extract invite link code from URL\nconst extractInviteLink = (url)=>{\n    if (!url) return null;\n    try {\n        const match = url.match(/https:\\/\\/chat\\.whatsapp\\.com(?:\\/invite)?\\/([A-Za-z0-9]{22})/);\n        if (match && match[1]) {\n            return {\n                code: match[1],\n                url: match[0]\n            };\n        }\n    } catch (error) {\n        console.error('Error extracting invite link:', error);\n    }\n    return null;\n};\n// Start crawler for a single URL\nconst crawlSingleUrl = async (url)=>{\n    if (isCrawlerRunning) {\n        return;\n    }\n    // Start a crawler that only processes this URL\n    return startCrawler([\n        url\n    ], true);\n};\n// Start the crawler with the given URLs\nconst startCrawler = async (urls, singleMode = false)=>{\n    if (isCrawlerRunning) {\n        return;\n    }\n    isCrawlerRunning = true;\n    stopRequested = false;\n    totalRequestsAdded = urls.length;\n    processedRequests = 0;\n    // Get crawler configuration\n    const config = getCrawlerConfig();\n    // Initialize status\n    currentStatus = {\n        isRunning: true,\n        progress: 0,\n        totalUrls: urls.length,\n        processedUrls: 0,\n        errors: [],\n        startTime: new Date(),\n        lastUpdate: new Date()\n    };\n    (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n    // Create a request queue with the initial URLs\n    requestQueue = await crawlee__WEBPACK_IMPORTED_MODULE_0__.RequestQueue.open();\n    // Add the initial URLs to the queue\n    for (const url of urls){\n        await requestQueue.addRequest({\n            url\n        });\n    }\n    try {\n        // Choose either headless browser or basic crawler based on settings\n        if (config.useHeadless) {\n            // Use Playwright for JavaScript-rendered content\n            crawler = new crawlee__WEBPACK_IMPORTED_MODULE_0__.PlaywrightCrawler({\n                // Use the request queue we created\n                requestQueue,\n                // Use configuration from settings\n                maxRequestsPerCrawl: config.maxRequestsPerCrawl,\n                maxConcurrency: config.maxConcurrency,\n                maxRequestRetries: config.maxRequestRetries,\n                requestHandlerTimeoutSecs: config.requestHandlerTimeoutSecs,\n                // For headless browser mode\n                navigationTimeoutSecs: config.navigationTimeoutSecs,\n                // Add delay between requests to the same domain to avoid rate limiting\n                sameDomainDelaySecs: config.sameDomainDelaySecs,\n                // Handle failed requests\n                failedRequestHandler (context) {\n                    const { request, error } = context;\n                    console.error(`Request ${request.url} failed: ${error?.message || 'Unknown error'}`);\n                    currentStatus.errors.push(`Failed to crawl ${request.url}: ${error?.message || 'Unknown error'}`);\n                    // Update progress for failed requests too\n                    processedRequests++;\n                    currentStatus.processedUrls = processedRequests;\n                    currentStatus.progress = Math.min(100, Math.round(processedRequests / totalRequestsAdded * 100));\n                    (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                },\n                // Handle each request with Playwright\n                async requestHandler ({ page, request, enqueueLinks }) {\n                    // Update status\n                    console.log(`Crawling with headless browser: ${request.url}`);\n                    currentStatus.currentUrl = request.url;\n                    currentStatus.lastUpdate = new Date();\n                    if (stopRequested) {\n                        return;\n                    }\n                    try {\n                        // Wait for page to load\n                        await page.waitForLoadState('networkidle');\n                        // Get page content\n                        const content = await page.content();\n                        // Find WhatsApp links in content using regex\n                        const waLinks = [];\n                        let match;\n                        whatsappLinkRegex.lastIndex = 0;\n                        const bodyText = content;\n                        while((match = whatsappLinkRegex.exec(bodyText)) !== null){\n                            const link = extractInviteLink(match[0]);\n                            if (link) {\n                                waLinks.push(link);\n                            }\n                        }\n                        // Get all href attributes\n                        const hrefs = await page.evaluate(()=>{\n                            return Array.from(document.querySelectorAll('a')).map((a)=>a.href);\n                        });\n                        // Extract WhatsApp links from href attributes\n                        for (const href of hrefs){\n                            const link = extractInviteLink(href);\n                            if (link) {\n                                waLinks.push(link);\n                            }\n                        }\n                        // Save the extracted links with a consistent filename based on domain\n                        if (waLinks.length > 0) {\n                            const domain = extractDomain(request.url);\n                            (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveWhatsAppLinks)(domain, waLinks);\n                        }\n                        // If in single URL mode, don't enqueue additional URLs\n                        if (!stopRequested && !singleMode) {\n                            const enqueuedUrls = await enqueueLinks({\n                                strategy: 'same-domain',\n                                // Exclude some problematic URLs\n                                exclude: [\n                                    'https://www.hindustantimes.com',\n                                    '*/wp-admin/*',\n                                    '*/wp-login.php*',\n                                    '*/logout*',\n                                    '*/sign-out*'\n                                ]\n                            });\n                            // Update the total requests added with newly enqueued URLs\n                            const enqueuedCount = Array.isArray(enqueuedUrls) ? enqueuedUrls.length : enqueuedUrls.processedRequests?.length || 0;\n                            if (enqueuedCount > 0) {\n                                totalRequestsAdded += enqueuedCount;\n                                currentStatus.totalUrls = totalRequestsAdded;\n                            }\n                        }\n                        // Update progress\n                        processedRequests++;\n                        currentStatus.processedUrls = processedRequests;\n                        // Get queue info to calculate more accurate progress\n                        const queueInfo = requestQueue ? await requestQueue.getInfo() : null;\n                        // Calculate progress based on processed vs total\n                        if (queueInfo && queueInfo.totalRequestCount > 0) {\n                            // Use handledRequestCount from queue info for more accuracy\n                            const handledCount = queueInfo.handledRequestCount;\n                            // Progress is the ratio of handled requests to total requests\n                            currentStatus.progress = Math.min(100, Math.round(handledCount / Math.max(totalRequestsAdded, queueInfo.totalRequestCount) * 100));\n                        } else {\n                            // Fallback calculation if queue info not available\n                            currentStatus.progress = Math.min(100, Math.round(processedRequests / totalRequestsAdded * 100));\n                        }\n                        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                    } catch (error) {\n                        console.error(`Error processing ${request.url}:`, error);\n                        currentStatus.errors.push(`Error processing ${request.url}: ${error.message || 'Unknown error'}`);\n                        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                    }\n                }\n            });\n        } else {\n            // Use Cheerio for static HTML parsing (faster)\n            crawler = new crawlee__WEBPACK_IMPORTED_MODULE_0__.CheerioCrawler({\n                // Use the request queue we created\n                requestQueue,\n                // Use configuration from settings\n                maxRequestsPerCrawl: config.maxRequestsPerCrawl,\n                maxConcurrency: config.maxConcurrency,\n                maxRequestRetries: config.maxRequestRetries,\n                requestHandlerTimeoutSecs: config.requestHandlerTimeoutSecs,\n                // For headless browser mode (if enabled)\n                navigationTimeoutSecs: config.navigationTimeoutSecs,\n                // Add delay between requests to the same domain to avoid rate limiting\n                sameDomainDelaySecs: config.sameDomainDelaySecs,\n                // Handle each request\n                async requestHandler ({ $, enqueueLinks, request, crawler }) {\n                    // Update status\n                    console.log(`Crawling: ${request.url}`);\n                    currentStatus.currentUrl = request.url;\n                    currentStatus.lastUpdate = new Date();\n                    if (stopRequested) {\n                        return;\n                    }\n                    try {\n                        const waLinks = [];\n                        // Extract links from <a> tags\n                        $('a').each((_, element)=>{\n                            const link = extractInviteLink($(element).attr('href'));\n                            if (link) {\n                                waLinks.push(link);\n                            }\n                        });\n                        // Extract links from body text\n                        const bodyText = $('body').text();\n                        let match;\n                        // Reset regex lastIndex before using it again\n                        whatsappLinkRegex.lastIndex = 0;\n                        while((match = whatsappLinkRegex.exec(bodyText)) !== null){\n                            const link = extractInviteLink(match[0]);\n                            if (link) {\n                                waLinks.push(link);\n                            }\n                        }\n                        // Save the extracted links with a consistent filename based on domain\n                        if (waLinks.length > 0) {\n                            const domain = extractDomain(request.url);\n                            (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveWhatsAppLinks)(domain, waLinks);\n                        }\n                        // If in single URL mode, don't enqueue additional URLs\n                        if (!stopRequested && !singleMode) {\n                            const enqueuedUrls = await enqueueLinks({\n                                strategy: 'same-domain',\n                                // Exclude some problematic URLs\n                                exclude: [\n                                    'https://www.hindustantimes.com',\n                                    '*/wp-admin/*',\n                                    '*/wp-login.php*',\n                                    '*/logout*',\n                                    '*/sign-out*'\n                                ]\n                            });\n                            // Update the total requests added with newly enqueued URLs\n                            const enqueuedCount = Array.isArray(enqueuedUrls) ? enqueuedUrls.length : enqueuedUrls.processedRequests?.length || 0;\n                            if (enqueuedCount > 0) {\n                                totalRequestsAdded += enqueuedCount;\n                                currentStatus.totalUrls = totalRequestsAdded;\n                            }\n                        }\n                        // Update progress\n                        processedRequests++;\n                        currentStatus.processedUrls = processedRequests;\n                        // Get queue info to calculate more accurate progress\n                        const queueInfo = requestQueue ? await requestQueue.getInfo() : null;\n                        // Calculate progress based on processed vs total (including newly discovered)\n                        if (queueInfo && queueInfo.totalRequestCount > 0) {\n                            // Use handledRequestCount from queue info for more accuracy\n                            const handledCount = queueInfo.handledRequestCount;\n                            // Progress is the ratio of handled requests to total requests\n                            currentStatus.progress = Math.min(100, Math.round(handledCount / Math.max(totalRequestsAdded, queueInfo.totalRequestCount) * 100));\n                        } else {\n                            // Fallback calculation if queue info not available\n                            currentStatus.progress = Math.min(100, Math.round(processedRequests / totalRequestsAdded * 100));\n                        }\n                        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                    } catch (error) {\n                        console.error(`Error processing ${request.url}:`, error);\n                        currentStatus.errors.push(`Error processing ${request.url}: ${error.message || 'Unknown error'}`);\n                        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                    }\n                },\n                // Handle failed requests\n                failedRequestHandler (context) {\n                    const { request, error } = context;\n                    console.error(`Request ${request.url} failed: ${error?.message || 'Unknown error'}`);\n                    currentStatus.errors.push(`Failed to crawl ${request.url}: ${error?.message || 'Unknown error'}`);\n                    // Update progress for failed requests too\n                    processedRequests++;\n                    currentStatus.processedUrls = processedRequests;\n                    currentStatus.progress = Math.min(100, Math.round(processedRequests / totalRequestsAdded * 100));\n                    (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n                }\n            });\n        }\n        // Start the crawler with the request queue\n        await crawler.run();\n    } catch (error) {\n        console.error('Crawler error:', error);\n        currentStatus.errors.push(`Crawler error: ${error.message || 'Unknown error'}`);\n    } finally{\n        // Mark crawler as stopped\n        isCrawlerRunning = false;\n        currentStatus.isRunning = false;\n        currentStatus.lastUpdate = new Date();\n        currentStatus.progress = 100; // Ensure progress is 100% when stopped\n        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n        crawler = null;\n        // Purge the request queue to clean up\n        if (requestQueue) {\n            await requestQueue.drop();\n            requestQueue = null;\n        }\n    }\n};\n// Stop the crawler\nconst stopCrawler = ()=>{\n    if (crawler) {\n        stopRequested = true;\n        // Abort the crawler's pool of requests\n        crawler.autoscaledPool?.abort();\n        console.log('Crawler stopping...');\n        currentStatus.lastUpdate = new Date();\n        (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.saveStatus)(currentStatus);\n    }\n};\n// Get current crawler status\nconst getCrawlerStatus = ()=>{\n    const savedStatus = (0,_fileSystem__WEBPACK_IMPORTED_MODULE_1__.getStatus)();\n    if (savedStatus) {\n        return savedStatus;\n    }\n    return currentStatus;\n};\n// Check if crawler is running\nconst isRunning = ()=>{\n    return isCrawlerRunning;\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./utils/crawler.ts\n");

/***/ }),

/***/ "(api-node)/./utils/fileSystem.ts":
/*!*****************************!*\
  !*** ./utils/fileSystem.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStatus: () => (/* binding */ getStatus),\n/* harmony export */   getUrls: () => (/* binding */ getUrls),\n/* harmony export */   initFileSystem: () => (/* binding */ initFileSystem),\n/* harmony export */   saveStatus: () => (/* binding */ saveStatus),\n/* harmony export */   saveUrls: () => (/* binding */ saveUrls),\n/* harmony export */   saveWhatsAppLinks: () => (/* binding */ saveWhatsAppLinks)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Create data directory if it doesn't exist\nconst dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'data');\nconst configPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, 'crawler-config.json');\nconst statusPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, 'crawler-status.json');\nconst initFileSystem = ()=>{\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dataDir, {\n            recursive: true\n        });\n    }\n};\nconst saveUrls = (urls)=>{\n    initFileSystem();\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(configPath, JSON.stringify({\n        urls\n    }, null, 2));\n};\nconst getUrls = ()=>{\n    initFileSystem();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(configPath)) {\n        return [];\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(configPath, 'utf8');\n        const config = JSON.parse(data);\n        return config.urls || [];\n    } catch (error) {\n        console.error('Error reading URL configuration:', error);\n        return [];\n    }\n};\n// Extract domain root from hostname for consistent filenames\nconst getConsistentDomainName = (domain)=>{\n    // Extract the root domain (e.g., example.com from sub.example.com)\n    // First remove www. if present\n    let cleanDomain = domain.replace(/^www\\./, '');\n    // Split by dots and take the last two parts if there are at least two parts\n    const parts = cleanDomain.split('.');\n    if (parts.length >= 2) {\n        // For domains like example.co.uk, we'd want to keep \"example\"\n        // For normal domains like example.com, we'd keep \"example\"\n        // Check for common two-part TLDs like .co.uk\n        if (parts.length > 2 && parts[parts.length - 2].length <= 3) {\n            cleanDomain = parts[parts.length - 3];\n        } else {\n            cleanDomain = parts[parts.length - 2];\n        }\n    }\n    return cleanDomain.toLowerCase();\n};\nconst saveWhatsAppLinks = (domain, links)=>{\n    initFileSystem();\n    // Get consistent domain name for the filename\n    const rootDomain = getConsistentDomainName(domain);\n    // Sanitize domain for filename\n    const sanitizedDomain = rootDomain.replace(/[^a-zA-Z0-9]/g, '_');\n    const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(dataDir, `${sanitizedDomain}.json`);\n    console.log(`Saving WhatsApp links from ${domain} to ${sanitizedDomain}.json`);\n    // Load existing data if file exists\n    let existingLinks = [];\n    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n        try {\n            const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, 'utf8');\n            existingLinks = JSON.parse(data);\n        } catch (error) {\n            console.error(`Error reading existing links for ${domain}:`, error);\n        }\n    }\n    // Merge links and remove duplicates based on code\n    const uniqueCodes = new Set();\n    const uniqueLinks = [\n        ...existingLinks,\n        ...links\n    ].filter((link)=>{\n        if (uniqueCodes.has(link.code)) {\n            return false;\n        }\n        uniqueCodes.add(link.code);\n        return true;\n    });\n    // Save the updated links\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, JSON.stringify(uniqueLinks, null, 2));\n};\nconst saveStatus = (status)=>{\n    initFileSystem();\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(statusPath, JSON.stringify(status, null, 2));\n};\nconst getStatus = ()=>{\n    initFileSystem();\n    if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(statusPath)) {\n        return null;\n    }\n    try {\n        const data = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(statusPath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading crawler status:', error);\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1lBQzlCLE9BQU87UUFDVDtRQUNBTixZQUFZTyxHQUFHLENBQUNILEtBQUtFLElBQUk7UUFDekIsT0FBTztJQUNUO0lBRUEseUJBQXlCO0lBQ3pCN0MsdURBQWdCLENBQUNvQyxVQUFVckIsS0FBS0MsU0FBUyxDQUFDeUIsYUFBYSxNQUFNO0FBQy9ELEVBQUU7QUFFSyxNQUFNTSxhQUFhLENBQUNDO0lBQ3pCeEM7SUFDQVIsdURBQWdCLENBQUNPLFlBQVlRLEtBQUtDLFNBQVMsQ0FBQ2dDLFFBQVEsTUFBTTtBQUM1RCxFQUFFO0FBRUssTUFBTUMsWUFBWTtJQUN2QnpDO0lBQ0EsSUFBSSxDQUFDUixvREFBYSxDQUFDTyxhQUFhO1FBQzlCLE9BQU87SUFDVDtJQUNBLElBQUk7UUFDRixNQUFNVyxPQUFPbEIsc0RBQWUsQ0FBQ08sWUFBWTtRQUN6QyxPQUFPUSxLQUFLTSxLQUFLLENBQUNIO0lBQ3BCLEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPO0lBQ1Q7QUFDRixFQUFFIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3V0aWxzL2ZpbGVTeXN0ZW0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ3Jhd2xSZXN1bHQsIFdoYXRzQXBwTGluayB9IGZyb20gJy4uL3R5cGVzL2NyYXdsZXInO1xuXG4vLyBDcmVhdGUgZGF0YSBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdFxuY29uc3QgZGF0YURpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZGF0YScpO1xuY29uc3QgY29uZmlnUGF0aCA9IHBhdGguam9pbihkYXRhRGlyLCAnY3Jhd2xlci1jb25maWcuanNvbicpO1xuY29uc3Qgc3RhdHVzUGF0aCA9IHBhdGguam9pbihkYXRhRGlyLCAnY3Jhd2xlci1zdGF0dXMuanNvbicpO1xuXG5leHBvcnQgY29uc3QgaW5pdEZpbGVTeXN0ZW0gPSAoKSA9PiB7XG4gIGlmICghZnMuZXhpc3RzU3luYyhkYXRhRGlyKSkge1xuICAgIGZzLm1rZGlyU3luYyhkYXRhRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVVcmxzID0gKHVybHM6IHN0cmluZ1tdKTogdm9pZCA9PiB7XG4gIGluaXRGaWxlU3lzdGVtKCk7XG4gIGZzLndyaXRlRmlsZVN5bmMoY29uZmlnUGF0aCwgSlNPTi5zdHJpbmdpZnkoeyB1cmxzIH0sIG51bGwsIDIpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRVcmxzID0gKCk6IHN0cmluZ1tdID0+IHtcbiAgaW5pdEZpbGVTeXN0ZW0oKTtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGNvbmZpZ1BhdGgpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhjb25maWdQYXRoLCAndXRmOCcpO1xuICAgIGNvbnN0IGNvbmZpZyA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgcmV0dXJuIGNvbmZpZy51cmxzIHx8IFtdO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlYWRpbmcgVVJMIGNvbmZpZ3VyYXRpb246JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxuLy8gRXh0cmFjdCBkb21haW4gcm9vdCBmcm9tIGhvc3RuYW1lIGZvciBjb25zaXN0ZW50IGZpbGVuYW1lc1xuY29uc3QgZ2V0Q29uc2lzdGVudERvbWFpbk5hbWUgPSAoZG9tYWluOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAvLyBFeHRyYWN0IHRoZSByb290IGRvbWFpbiAoZS5nLiwgZXhhbXBsZS5jb20gZnJvbSBzdWIuZXhhbXBsZS5jb20pXG4gIC8vIEZpcnN0IHJlbW92ZSB3d3cuIGlmIHByZXNlbnRcbiAgbGV0IGNsZWFuRG9tYWluID0gZG9tYWluLnJlcGxhY2UoL153d3dcXC4vLCAnJyk7XG4gIFxuICAvLyBTcGxpdCBieSBkb3RzIGFuZCB0YWtlIHRoZSBsYXN0IHR3byBwYXJ0cyBpZiB0aGVyZSBhcmUgYXQgbGVhc3QgdHdvIHBhcnRzXG4gIGNvbnN0IHBhcnRzID0gY2xlYW5Eb21haW4uc3BsaXQoJy4nKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgLy8gRm9yIGRvbWFpbnMgbGlrZSBleGFtcGxlLmNvLnVrLCB3ZSdkIHdhbnQgdG8ga2VlcCBcImV4YW1wbGVcIlxuICAgIC8vIEZvciBub3JtYWwgZG9tYWlucyBsaWtlIGV4YW1wbGUuY29tLCB3ZSdkIGtlZXAgXCJleGFtcGxlXCJcbiAgICAvLyBDaGVjayBmb3IgY29tbW9uIHR3by1wYXJ0IFRMRHMgbGlrZSAuY28udWtcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMiAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXS5sZW5ndGggPD0gMykge1xuICAgICAgY2xlYW5Eb21haW4gPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYW5Eb21haW4gPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBjbGVhbkRvbWFpbi50b0xvd2VyQ2FzZSgpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhdmVXaGF0c0FwcExpbmtzID0gKGRvbWFpbjogc3RyaW5nLCBsaW5rczogV2hhdHNBcHBMaW5rW10pOiB2b2lkID0+IHtcbiAgaW5pdEZpbGVTeXN0ZW0oKTtcbiAgXG4gIC8vIEdldCBjb25zaXN0ZW50IGRvbWFpbiBuYW1lIGZvciB0aGUgZmlsZW5hbWVcbiAgY29uc3Qgcm9vdERvbWFpbiA9IGdldENvbnNpc3RlbnREb21haW5OYW1lKGRvbWFpbik7XG4gIFxuICAvLyBTYW5pdGl6ZSBkb21haW4gZm9yIGZpbGVuYW1lXG4gIGNvbnN0IHNhbml0aXplZERvbWFpbiA9IHJvb3REb21haW4ucmVwbGFjZSgvW15hLXpBLVowLTldL2csICdfJyk7XG4gIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKGRhdGFEaXIsIGAke3Nhbml0aXplZERvbWFpbn0uanNvbmApO1xuICBcbiAgY29uc29sZS5sb2coYFNhdmluZyBXaGF0c0FwcCBsaW5rcyBmcm9tICR7ZG9tYWlufSB0byAke3Nhbml0aXplZERvbWFpbn0uanNvbmApO1xuICBcbiAgLy8gTG9hZCBleGlzdGluZyBkYXRhIGlmIGZpbGUgZXhpc3RzXG4gIGxldCBleGlzdGluZ0xpbmtzOiBXaGF0c0FwcExpbmtbXSA9IFtdO1xuICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgIGV4aXN0aW5nTGlua3MgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZWFkaW5nIGV4aXN0aW5nIGxpbmtzIGZvciAke2RvbWFpbn06YCwgZXJyb3IpO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gTWVyZ2UgbGlua3MgYW5kIHJlbW92ZSBkdXBsaWNhdGVzIGJhc2VkIG9uIGNvZGVcbiAgY29uc3QgdW5pcXVlQ29kZXMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHVuaXF1ZUxpbmtzID0gWy4uLmV4aXN0aW5nTGlua3MsIC4uLmxpbmtzXS5maWx0ZXIobGluayA9PiB7XG4gICAgaWYgKHVuaXF1ZUNvZGVzLmhhcyhsaW5rLmNvZGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXF1ZUNvZGVzLmFkZChsaW5rLmNvZGUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgXG4gIC8vIFNhdmUgdGhlIHVwZGF0ZWQgbGlua3NcbiAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkodW5pcXVlTGlua3MsIG51bGwsIDIpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzYXZlU3RhdHVzID0gKHN0YXR1czogYW55KTogdm9pZCA9PiB7XG4gIGluaXRGaWxlU3lzdGVtKCk7XG4gIGZzLndyaXRlRmlsZVN5bmMoc3RhdHVzUGF0aCwgSlNPTi5zdHJpbmdpZnkoc3RhdHVzLCBudWxsLCAyKSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U3RhdHVzID0gKCk6IGFueSA9PiB7XG4gIGluaXRGaWxlU3lzdGVtKCk7XG4gIGlmICghZnMuZXhpc3RzU3luYyhzdGF0dXNQYXRoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhzdGF0dXNQYXRoLCAndXRmOCcpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlYWRpbmcgY3Jhd2xlciBzdGF0dXM6JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImZzIiwicGF0aCIsImRhdGFEaXIiLCJqb2luIiwicHJvY2VzcyIsImN3ZCIsImNvbmZpZ1BhdGgiLCJzdGF0dXNQYXRoIiwiaW5pdEZpbGVTeXN0ZW0iLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwic2F2ZVVybHMiLCJ1cmxzIiwid3JpdGVGaWxlU3luYyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRVcmxzIiwiZGF0YSIsInJlYWRGaWxlU3luYyIsImNvbmZpZyIsInBhcnNlIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0Q29uc2lzdGVudERvbWFpbk5hbWUiLCJkb21haW4iLCJjbGVhbkRvbWFpbiIsInJlcGxhY2UiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJzYXZlV2hhdHNBcHBMaW5rcyIsImxpbmtzIiwicm9vdERvbWFpbiIsInNhbml0aXplZERvbWFpbiIsImZpbGVQYXRoIiwibG9nIiwiZXhpc3RpbmdMaW5rcyIsInVuaXF1ZUNvZGVzIiwiU2V0IiwidW5pcXVlTGlua3MiLCJmaWx0ZXIiLCJsaW5rIiwiaGFzIiwiY29kZSIsImFkZCIsInNhdmVTdGF0dXMiLCJzdGF0dXMiLCJnZXRTdGF0dXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./utils/fileSystem.ts\n");

/***/ }),

/***/ "crawlee":
/*!**************************!*\
  !*** external "crawlee" ***!
  \**************************/
/***/ ((module) => {

module.exports = import("crawlee");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcrawler%2Fstatus&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcrawler%2Fstatus.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();